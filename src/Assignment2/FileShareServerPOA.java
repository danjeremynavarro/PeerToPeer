package Assignment2;


/**
* Assignment2/FileShareServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ./server.idl
* Saturday, January 25, 2025 5:51:19 o'clock PM MST
*/

public abstract class FileShareServerPOA extends org.omg.PortableServer.Servant
 implements Assignment2.FileShareServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getFiles", new java.lang.Integer (0));
    _methods.put ("insertFile", new java.lang.Integer (1));
    _methods.put ("getFile", new java.lang.Integer (2));
    _methods.put ("unshareFile", new java.lang.Integer (3));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // Assignment2/FileShareServer/getFiles
       {
         Assignment2.KeyVal $result[] = null;
         $result = this.getFiles ();
         out = $rh.createReply();
         Assignment2.KeyValSeqHelper.write (out, $result);
         break;
       }

       case 1:  // Assignment2/FileShareServer/insertFile
       {
         String host = in.read_string ();
         int port = in.read_long ();
         String filename = in.read_string ();
         boolean $result = false;
         $result = this.insertFile (host, port, filename);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // Assignment2/FileShareServer/getFile
       {
         String filename = in.read_string ();
         String $result = null;
         $result = this.getFile (filename);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // Assignment2/FileShareServer/unshareFile
       {
         String host = in.read_string ();
         String filename = in.read_string ();
         boolean $result = false;
         $result = this.unshareFile (host, filename);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Assignment2/FileShareServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public FileShareServer _this() 
  {
    return FileShareServerHelper.narrow(
    super._this_object());
  }

  public FileShareServer _this(org.omg.CORBA.ORB orb) 
  {
    return FileShareServerHelper.narrow(
    super._this_object(orb));
  }


} // class FileShareServerPOA
